---
# Source: openebs/charts/lvm-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
metadata:
  name: openebs-lvm-localpv-csi-controller-critical
value: 900000000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver controller deployment only."
---
# Source: openebs/charts/lvm-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
metadata:
  name: openebs-lvm-localpv-csi-node-critical
value: 900001000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver node deployment only."
---
# Source: openebs/charts/mayastor/templates/mayastor/priority-class/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
description: Used for critical pods that must run in the cluster, which can be moved to another node if necessary.
metadata:
  name: openebs-cluster-critical
preemptionPolicy: PreemptLowerPriority
value: 1000000000
---
# Source: openebs/charts/zfs-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
metadata:
  name: openebs-zfs-csi-controller-critical
value: 900000000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver controller deployment only."
---
# Source: openebs/charts/zfs-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
metadata:
  name: openebs-zfs-csi-node-critical
value: 900001000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver node deployment only."
---
# Source: openebs/charts/mayastor/charts/etcd/templates/pdb.yaml
apiVersion: policy/v1
metadata:
  name: openebs-etcd
  namespace: "openebs"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.6.0
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/managed-by: Helm
spec:
  minAvailable: 51%
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: openebs
---
# Source: openebs/charts/mayastor/charts/nats/templates/pdb.yaml
apiVersion: policy/v1
metadata:
  name: openebs-nats
  namespace: openebs
  labels:
    helm.sh/chart: nats-0.19.14
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.9.17"
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: openebs
---
# Source: openebs/charts/localpv-provisioner/templates/rbac.yaml
apiVersion: v1
metadata:
  name: openebs-localpv-provisioner
  labels:
    chart: localpv-provisioner-4.1.0
    heritage: Helm
    openebs.io/version: "4.1.0"
    app: localpv-provisioner
    release: openebs
    component: "localpv-provisioner"
    openebs.io/component-name: openebs-localpv-provisioner
---
apiVersion: v1
metadata:
  name: openebs-lvm-controller-sa
  namespace: openebs
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
---
# Source: openebs/charts/lvm-localpv/templates/rbac.yaml
apiVersion: v1
metadata:
  name: openebs-lvm-node-sa
  namespace: openebs
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    name: "openebs-lvm-node"
    release: openebs
    openebs.io/component-name: "openebs-lvm-node"
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
metadata:
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
  annotations: {}
  name: openebs-loki
  namespace: openebs
automountServiceAccountToken: true
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/promtail/templates/serviceaccount.yaml
apiVersion: v1
metadata:
  name: openebs-promtail
  namespace: openebs
  labels:
    helm.sh/chart: promtail-6.13.1
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.8.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: openebs/charts/mayastor/charts/nats/templates/rbac.yaml
apiVersion: v1
metadata:
  name: openebs-nats
  namespace: openebs
  labels:
    helm.sh/chart: nats-0.19.14
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.9.17"
    app.kubernetes.io/managed-by: Helm
---
# Source: openebs/charts/mayastor/templates/mayastor/rbac/rbac.yaml
apiVersion: v1
metadata:
  name: openebs-service-account
  namespace: openebs
  labels:
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
---
apiVersion: v1
metadata:
  name: openebs-zfs-controller-sa
  namespace: openebs
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
---
# Source: openebs/charts/zfs-localpv/templates/rbac.yaml
apiVersion: v1
metadata:
  name: openebs-zfs-node-sa
  namespace: openebs
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: openebs
    openebs.io/component-name: "openebs-zfs-node"
---
# Source: openebs/charts/mayastor/charts/etcd/templates/token-secrets.yaml
apiVersion: v1
metadata:
  name: openebs-etcd-jwt-token
  namespace: "openebs"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.6.0
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  jwt-token.pem: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBd2Zpb2pJcGdoU3VLVVBOYTJKZ1h4TUxhZmZ5R3BScmY0TkYxWnJyTVpqY05tNlF2CkZNSUdpY0RuU2Q2MFJWcHRvMEdmeTk0ZEhsa0cwaEpRcXFRb2U5K28wM2VQN3RNRGZFd0hmbFBjQTU0bWxQczAKajlseXFaR201NnhVL21neW1sckd1QUxLK21CTUxwOVBZOVphMWhGOW1NRlRFNzJHd3VFVUtCZ1JUYUwzWTdDaQpPYWMvQmIyWjAvaXdTeHE3bFd6YjQrZjYwblB1SlpQL3ptenRLMUZzMUIrZEJRTEorWlNQNDZvc01VSUgwQmtCCmxIWkI0aFFTUHZERjNQV3NZcEFiTy95TG9aYUorTWRpaDYyVXJPbnRKRkNYR1FiTVJhWmRmSFdnQUNmeWRCWUkKTVRBbEMxK2psUjNnWnh5U0JnbWJHRjdUWmVkdll1QmZBQVBObnpWUW1MeGcwaXNWUnUrU1BVY1REQ3diQ0RxcApqa3Jta3hrRDF5Z3o3S01VMXQwTTZZTWtOaFJweFM2TGFPMGtkdzJCVlk2eEc3U284Vm0zQ211OG5WK1djd2RXCjRTTnhsWDNGZWFGQjE4cWZkYUFyM29JYTFkcldEWG4xUVU1RVhFMGwvbEk4NFg3NWxQZU9OK3JJOHI3MXV4UE4Kd3BkOWM0azdWMGRQcmtlOGliRFVHUGx5WFJQRnh2bE5JTVMyTEhDWnhZb29rR0lVWlhaUG0rdnBIUTloTmR6WgpLU0tCaFc5MVN3QXcycjNVME5PTG5DNUxnMHQxbVIrRVBpSEt0bU1HQkpFMnlqQS9jbWc2STFxdVJXQS9lalFXCjd6RWFHN28yeXdpbmhyZ2lHSmc2V2xqd1RWNWFncW44eGFyeUNSbUpCbWQ3K3FieGo4alF4Z1NoT21NQ0F3RUEKQVFLQ0FnQllPVER3TzBBTFVmSm5QMGhpbTBxMFE2djlBWTU4S2UwSjVEcnhycVNwR1FFbmVWV3dxMDh0K0g4NgpLZ0QwU2x6emxEV0tGRXhLTVZQWTJGdTRRVkhvaGFIVUROMTZVcCtUT1VGdlE5VWVFQ0NjUW1WMXlBRk8vdUJiCkh4YkpYN3NrV1lWb3pGeGw1TWJCcmRQK0pOREw3TWlqWWNyWGY2eDdsc1FFT0c0bVVha1R2cE1LaGZjME5UaHkKSVBxT0xtcURYQy9uU092Y0xMNTBlUXd3WjNxMzZTRUdtaHBnM1JQZ1lLSFJldVQrd25tclBMUnJRaDVWSmF2bQoxTHdwODlPa1FNY2lVWXR3dzNlZG41SkJBOEpMbzFvbzJqN2ZNeWhWeFlWZnhtQXZzZnVrc1NDb3ZxMGFyelZICjdYN1RaenREWTdzWEtvb2NIMWVhTVZNRVByYVdtSE9MVXVuQno3RTBZVlE1eEtGS3BXUVMxT2QyOHpSeVdDNnMKSktMVU96cC9EdVA4cnNVVWVyZkRmRG1lVnoxZk15RGxSTEl0Ulo0ckl2c0ZEKzBkQ0lISHpuUkhIVmYzaGE0RgpjQ2hlSXYxQ1FwV2VHQlo3Z2luK0ZYYnN1ZFNhYkl6SGswNVJlUS9tNy8xb3ZGVDVQMDQwQXBkdGRqdXFRbTdQCmNkV3BCNGFuaHRiSmIzczRCNzdUckxONjk2dmxDbjJGQlZ6U3hlYjlOY1FNRVFzY1V4WWFoQS9YalB1K2g5V1QKcGRWNWpvaE03SlRFd2JpeXNJQmloNktJYlJ1VDIxNGpPZENSb3FNeTNuM2VUa1FnNTluaHZuMXV4SVZad1FydApLZk84Y29rMEV3UFFkT1ZDN2dia0d0NVQvUkhnVFNzbCs3MnB1dDg0UytrWWMvazdnUUtDQVFFQTJVK1VOUEpUCnYzNTJmMWFZcjdKVU9hNlV2ckYycGpzSGsrZ0JHZm1EdHViNkoxa0swVC9rY0pQNnVPck8xcis3WXhFcUhqUmcKaWt0ak9PbjJkeGZkT3k0S0RNTGFKblVFZklvOWR4QjZ3Z0gvWnBiM3JZZFVqdXFJUXFIVlhPZ1RKcU1GMGVweApScnNVd05aenFSbThnZHg4bWlEVmhwVHVYZlZRRU5FTlJhOEdyVm9MamphS1NzWkg0T29sRTNmM0wyS1VGTldjCjZvZ21ZRG42dkpMb0tWdld2K1hIV1dMQ0g4ODE1cFdQeEVTemRISk9pc1RUWWpPY0JjZ05vOUFmYWJCMFdjQXcKU1VhZTJkYXM5Rlg0YTBZd0lYem9HSXA3VEdyZ0t2S2ZUbEJuR2VBM2ZIcUVSTW81Z2NoTFhTdFFyL29PTG1wWgozR2Z6Ny95MHhxMTYzd0tDQVFFQTVJRlVMRWlHL3dIUzQ5eFNFVTRzalpMYkoxOHdBdFpld0ptSUhUY0pLWjBVCkFhcHRLeE1tRlBWR0dNTGRSbU1xamJmVHVOYitrWGJWS1NGaFhNaWtNdnZaN2h0MzdYZUNVbVVNNlJQNHd4K3YKSFh0V1NyWTlWeVArc1pTSlY3aTZYbUJ4MWdSWXk5Qkx1UlhSeHR0cExwczFRd1krYnp1RFppVk96S1NaVmtvZQpjdTdaMWROMmF4WVNUWUVDdmZhazZwK2hqL2RkUUZ5Smw0UTdMbEF1M2lybjQ0K0ZRL0JiSHh0VmxnWTBpc3JVCk9kaHUxa0RYOU9sVTFxSmE5S3RMVmxoMkNqak45RUp1cmtNUGdzUzU5YlNqVWE1amE2a1FGeSt4ekQ5Y2IyZU4KekhqakJ0OGRLeEZ2ZXVnV0NESHN4bG5tdGx1bGh2MnlBeU82c25hMC9RS0NBUUVBaVZHOUlKd0VpZHhhK3VwNAp2NFdiclh1QmFPTHhTK2UvU1JweEg3M0pHcG5vZDFiUC9CdzR1Vjc1TDBMSmczQlM5QzRUaEZTcXNKa2swUUVmCkNuQ2REdGx2NWxKMjBaaGVSbWlBb0sxY05SNVlDcmJaT2VGcmNJZ0pwTGxvL3pWemJKWFZocWx6L1RNWTBTWnkKbmVleWRBa2svNnhCNGJKWTBpekM5RzExeXBQb1QwQzRUcHh1VlFQb3hkcVBwVGJJanp2bXdTZWU2YUV4UnRzOApjMDhOdjV6V0hoc1FGbzdPaHBWRXhUbTdTRlgxWkY4YS9KdVZ5OWM2LzNoRURrRGtxTCtsTmxXNDdZVGZ1bDNxCm10ZDhqQ1VsSXZRd0lkbllRaGpESU1DQ0pGV3dZT3lMZzNCVUJyZ1hFTWpGdnRFeFFwSnJ4YTdVcSs5UWVWVWgKMHU0cTF3S0NBUUVBcDNpaDJGTFBuZFlZV2lmL2ZlOXRkOVZLQ1hFYUh2bytONnBPdUJxOS9HSERaL1VnVFpHYgpONEVML3RuU2t1UGJMRUt1U2FwSXFSUU81all3eFcvSDZCWHRnelZla0F3bTEzeDRHZHNwVnRqQjN6bWw1TnZyCjJSSG9lUDRFS3VhWXNOSyttN3hUMkF5eGN0VXJDak9FdzBPOXBZSE9BSGY5dGI5aUlWb0JoOXlLdEhHWjliMGwKN1JZZ0UrMlp0T0F2dmtXQWc2TW9GU085TSs4VjhMdVRuZ0NVTTVQY2VBNlF1aHV1Zm1YTjNHc0xYOW5nWWViawpYL3NpMHF2clBhYk5jRnNsS0JpNTJXdFc4eUR6SFVSUmhtTDl6NytmM2lmcVF4UVJtMEJVM3RGbWU1V2R6a3QzCmRUa3lHMEk5NDRPenBTditpMmhmeUsvbTU2WW9EdVF4Z1FLQ0FRQVZDTEIyeGp2SlBXYnhsUzVRQWJVNkZUanoKL21aVUpDNUU3SDlqR1UrRVNEQTZOb0RkT0dnSDE4SkxJUXhwUzNyaWdKNTBXMnNSemszUWlRMk9NQlozUjA5eApxcTB3cmNDQWhxS3Vkcmc1bUF6OGZ0SEl3L0lQQUVXaDM5N29DeDFidFBVa3R0cTZOcndIZVNjODJCWEtMejNwClRLWGN0MXNETEo1Qkg4OStCbk1wTUF3ano3T1BPUDN2NTlMTkpjNm5CRkQrd016cFBWSkJOZ2RYaXlhUkEwaEQKVGw1VjBFK0o4Y00rYndmV0lINzl3WWdiWHdLWUt0Q05sNHY1aERZdDJ6dFFtL0VOdm93WXBiNVBhVzNzQTJaZApsd2VUeXQ1dVdvMk5JTzg2ZEpscnpvVnVZWjRqcDZLRGxHL3N5eHNVVUpSRDhJd3plbW0wZytRRm1DZVEKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/secret.yaml
apiVersion: v1
metadata:
  name: openebs-loki
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
data:
  loki.yaml: YXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDBzCmNvbXBhY3RvcjoKICBjb21wYWN0aW9uX2ludGVydmFsOiAyMG0KICByZXRlbnRpb25fZGVsZXRlX2RlbGF5OiAxaAogIHJldGVudGlvbl9kZWxldGVfd29ya2VyX2NvdW50OiA1MAogIHJldGVudGlvbl9lbmFibGVkOiB0cnVlCiAgc2hhcmVkX3N0b3JlOiBmaWxlc3lzdGVtCiAgd29ya2luZ19kaXJlY3Rvcnk6IC9kYXRhL2xva2kvYm9sdGRiLXNoaXBwZXItY29tcGFjdG9yCmluZ2VzdGVyOgogIGNodW5rX2Jsb2NrX3NpemU6IDI2MjE0NAogIGNodW5rX2lkbGVfcGVyaW9kOiAzbQogIGNodW5rX3JldGFpbl9wZXJpb2Q6IDFtCiAgbGlmZWN5Y2xlcjoKICAgIHJpbmc6CiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMQogIG1heF90cmFuc2Zlcl9yZXRyaWVzOiAwCiAgd2FsOgogICAgZGlyOiAvZGF0YS9sb2tpL3dhbApsaW1pdHNfY29uZmlnOgogIGVuZm9yY2VfbWV0cmljX25hbWU6IGZhbHNlCiAgbWF4X2VudHJpZXNfbGltaXRfcGVyX3F1ZXJ5OiA1MDAwCiAgcmVqZWN0X29sZF9zYW1wbGVzOiB0cnVlCiAgcmVqZWN0X29sZF9zYW1wbGVzX21heF9hZ2U6IDE2OGgKICByZXRlbnRpb25fcGVyaW9kOiAxNjhoCm1lbWJlcmxpc3Q6CiAgam9pbl9tZW1iZXJzOgogIC0gJ29wZW5lYnMtbG9raS1tZW1iZXJsaXN0JwpzY2hlbWFfY29uZmlnOgogIGNvbmZpZ3M6CiAgLSBmcm9tOiAiMjAyMC0xMC0yNCIKICAgIGluZGV4OgogICAgICBwZXJpb2Q6IDI0aAogICAgICBwcmVmaXg6IGluZGV4XwogICAgb2JqZWN0X3N0b3JlOiBmaWxlc3lzdGVtCiAgICBzY2hlbWE6IHYxMQogICAgc3RvcmU6IGJvbHRkYi1zaGlwcGVyCnNlcnZlcjoKICBncnBjX2xpc3Rlbl9wb3J0OiA5MDk1CiAgaHR0cF9saXN0ZW5fcG9ydDogMzEwMApzdG9yYWdlX2NvbmZpZzoKICBib2x0ZGJfc2hpcHBlcjoKICAgIGFjdGl2ZV9pbmRleF9kaXJlY3Rvcnk6IC9kYXRhL2xva2kvYm9sdGRiLXNoaXBwZXItYWN0aXZlCiAgICBjYWNoZV9sb2NhdGlvbjogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1jYWNoZQogICAgY2FjaGVfdHRsOiAyNGgKICAgIHNoYXJlZF9zdG9yZTogZmlsZXN5c3RlbQogIGZpbGVzeXN0ZW06CiAgICBkaXJlY3Rvcnk6IC9kYXRhL2xva2kvY2h1bmtzCnRhYmxlX21hbmFnZXI6CiAgcmV0ZW50aW9uX2RlbGV0ZXNfZW5hYmxlZDogZmFsc2UKICByZXRlbnRpb25fcGVyaW9kOiAwcw==
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/promtail/templates/secret.yaml
apiVersion: v1
metadata:
  name: openebs-promtail
  namespace: openebs
  labels:
    helm.sh/chart: promtail-6.13.1
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.8.3"
    app.kubernetes.io/managed-by: Helm
stringData:
  promtail.yaml: "server:\n  log_level: info\n  log_format: logfmt\n  http_listen_port: 3101\n  health_check_target: false\n\nclients:\n  - url: http://openebs-loki:3100/loki/api/v1/push\n\npositions:\n  filename: /run/promtail/positions.yaml\n\nscrape_configs:\n  - job_name: openebs-pods-name\n    pipeline_stages:\n      - docker: {}\n      - replace:\n          expression: '(\\n)'\n          replace: ''\n      - multiline:\n          firstline: '^  \\x1b\\[2m(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).(\\d{6})Z'\n          max_wait_time: 3s\n      - multiline:\n          firstline: '^  (\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).(\\d{6})Z'\n          max_wait_time: 3s\n    kubernetes_sd_configs:\n    - role: pod\n    relabel_configs:\n    - source_labels:\n      - __meta_kubernetes_pod_node_name\n      target_label: hostname\n      action: replace\n    - action: labelmap\n      regex: __meta_kubernetes_pod_label_(.+)\n    - action: keep\n      source_labels:\n      - __meta_kubernetes_pod_label_openebs_io_logging\n      regex: true\n      target_label: openebs_component\n    - action: replace\n      replacement: $1\n      separator: /\n      source_labels:\n      - __meta_kubernetes_namespace\n      target_label: job\n    - action: replace\n      source_labels:\n      - __meta_kubernetes_pod_name\n      target_label: pod\n    - action: replace\n      source_labels:\n      - __meta_kubernetes_pod_container_name\n      target_label: container\n    - replacement: /var/log/pods/*$1/*.log\n      separator: /\n      source_labels:\n      - __meta_kubernetes_pod_uid\n      - __meta_kubernetes_pod_container_name\n      target_label: __path__\n  \n  \n\nlimits_config:\n  \n\ntracing:\n  enabled: false\n"
---
# Source: openebs/charts/mayastor/charts/loki-stack/templates/datasources.yaml
apiVersion: v1
metadata:
  name: openebs-loki-stack
  namespace: openebs
  labels:
    app: loki-stack
    chart: loki-stack-2.9.11
    release: openebs
    heritage: Helm
    grafana_datasource: "1"
data:
  loki-stack-datasource.yaml: |-
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      url: "http://openebs-loki:3100"
      version: 1
      isDefault: true
      jsonData:
        {}
---
# Source: openebs/charts/mayastor/charts/loki-stack/templates/tests/loki-test-configmap.yaml
apiVersion: v1
metadata:
  name: openebs-loki-stack-test
  labels:
    app: loki-stack
    chart: loki-stack-2.9.11
    release: openebs
    heritage: Helm
data:
  test.sh: |
    #!/usr/bin/env bash

    LOKI_URI="http://${LOKI_SERVICE}:${LOKI_PORT}"

    function setup() {
      apk add -u curl jq
      until (curl -s ${LOKI_URI}/loki/api/v1/label/app/values | jq -e '.data[] | select(. == "loki")'); do
        sleep 1
      done
    }

    @test "Has labels" {
      curl -s ${LOKI_URI}/loki/api/v1/labels | \
      jq -e '.data[] | select(. == "app")'
    }

    @test "Query log entry" {
      curl -sG ${LOKI_URI}/api/prom/query?limit=10 --data-urlencode 'query={app="loki"}' | \
      jq -e '.streams[].entries | length >=1'
    }

    @test "Push log entry" {
      local timestamp=$(date +%s000000000)
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"stream": {"app": "loki-test"}, "values": [[$timestamp, "foobar"]]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/loki/api/v1/push --data-raw "${data}"

      curl -sG ${LOKI_URI}/loki/api/v1/query_range?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.data.result[].values[][1] == "foobar"'
    }
---
# Source: openebs/charts/mayastor/charts/nats/templates/configmap.yaml
apiVersion: v1
metadata:
  name: openebs-nats-config
  namespace: openebs
  labels:
    helm.sh/chart: nats-0.19.14
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.9.17"
    app.kubernetes.io/managed-by: Helm
data:
  nats.conf: "# NATS Clients Port\nport: 4222\n\n# PID file shared with configuration reloader.\npid_file: \"/var/run/nats/nats.pid\"\n\n###############\n#             #\n# Monitoring  #\n#             #\n###############\nhttp: 8222\nserver_name:$POD_NAME\n###################################\n#                                 #\n# NATS JetStream                  #\n#                                 #\n###################################\njetstream {\n  max_mem: 5Mi\n}\n###################################\n#                                 #\n# NATS Full Mesh Clustering Setup #\n#                                 #\n###################################\ncluster {\n  port: 6222\n  name: nats\n\n  routes = [\n    nats://openebs-nats-0.openebs-nats.openebs:6222,nats://openebs-nats-1.openebs-nats.openebs:6222,nats://openebs-nats-2.openebs-nats.openebs:6222,\n    \n  ]\n  cluster_advertise: $CLUSTER_ADVERTISE\n\n  connect_retries: 120\n}\nlame_duck_grace_period: 10s\nlame_duck_duration: 30s\n"
---
apiVersion: v1
metadata:
  name: openebs-zfspv-bin
  namespace: openebs # should be the same namespace where it is getting mounted
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: openebs
    openebs.io/component-name: "openebs-zfs-node"
data:
  zfs: |
    #!/bin/sh
    if [ -x /host/sbin/zfs ]; then
      chroot /host /sbin/zfs "$@"
    elif [ -x /host/usr/sbin/zfs ]; then
      chroot /host /usr/sbin/zfs "$@"
    else
      chroot /host "zfs" "$@"
    fi
---
# Source: openebs/charts/localpv-provisioner/templates/hostpath-class.yaml
apiVersion: storage.k8s.io/v1
metadata:
  name: openebs-hostpath
  annotations:
    openebs.io/cas-type: local
    cas.openebs.io/config: |
      - name: StorageType
        value: "hostpath"
      - name: BasePath
        value: "/var/openebs/local"
provisioner: openebs.io/local
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
# Source: openebs/charts/mayastor/templates/etcd/storage/localpv-storageclass.yaml
apiVersion: storage.k8s.io/v1
metadata:
  annotations:
    cas.openebs.io/config: |
      - name: StorageType
        value: "hostpath"
      - name: BasePath
        value: "/var/local/openebs/localpv-hostpath/etcd"
    openebs.io/cas-type: local
  name: mayastor-etcd-localpv
provisioner: openebs.io/local
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
# Source: openebs/charts/mayastor/templates/loki-stack/storage/localpv-storageclass.yaml
apiVersion: storage.k8s.io/v1
metadata:
  annotations:
    cas.openebs.io/config: |
      - name: StorageType
        value: "hostpath"
      - name: BasePath
        value: "/var/local/openebs/localpv-hostpath/loki"
    openebs.io/cas-type: local
  name: mayastor-loki-localpv
provisioner: openebs.io/local
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: storage.k8s.io/v1
metadata:
  name: openebs-single-replica
allowVolumeExpansion: true
parameters:
  "protocol": "nvmf"
  "repl": "1"
provisioner: io.openebs.csi-mayastor
---
# Source: openebs/charts/lvm-localpv/charts/crds/templates/lvmnode.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: lvmnodes.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMNode
    listKind: LVMNodeList
    plural: lvmnodes
    shortNames:
      - lvmnode
    singular: lvmnode
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: LVMNode records information about all lvm volume groups available in a node. In general, the openebs node-agent creates the LVMNode object & periodically synchronizing the volume groups available in the node. LVMNode has an owner reference pointing to the corresponding node object.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            volumeGroups:
              items:
                description: VolumeGroup specifies attributes of a given vg exists on node.
                properties:
                  allocationPolicy:
                    description: 'AllocationPolicy indicates the volume group allocation policy. AllocationPolicy has the following mapping between int and string for its value: [-1: "", 0: "normal", 1: "contiguous", 2: "cling", 3: "anywhere", 4: "inherited"]'
                    type: integer
                  free:
                    anyOf:
                      - type: integer
                      - type: string
                    description: Free specifies the available capacity of volume group.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  lvCount:
                    description: LVCount denotes total number of logical volumes in volume group.
                    format: int32
                    minimum: 0
                    type: integer
                  maxLv:
                    description: MaxLV denotes maximum number of logical volumes allowed in volume group or 0 if unlimited.
                    format: int32
                    type: integer
                  maxPv:
                    description: MaxPV denotes maximum number of physical volumes allowed in volume group or 0 if unlimited.
                    format: int32
                    type: integer
                  metadataCount:
                    description: MetadataCount denotes number of metadata areas on the volume group.
                    format: int32
                    type: integer
                  metadataFree:
                    anyOf:
                      - type: integer
                      - type: string
                    description: MetadataFree specifies the available metadata area space for the volume group
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  metadataSize:
                    anyOf:
                      - type: integer
                      - type: string
                    description: MetadataSize specifies size of smallest metadata area for the volume group
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  metadataUsedCount:
                    description: MetadataUsedCount denotes number of used metadata areas in volume group
                    format: int32
                    type: integer
                  missingPvCount:
                    description: MissingPVCount denotes number of physical volumes in volume group which are missing.
                    format: int32
                    type: integer
                  name:
                    description: Name of the lvm volume group.
                    minLength: 1
                    type: string
                  permissions:
                    description: 'Permission indicates the volume group permission which can be writable or read-only. Permission has the following mapping between int and string for its value: [-1: "", 0: "writeable", 1: "read-only"]'
                    type: integer
                  pvCount:
                    description: PVCount denotes total number of physical volumes constituting the volume group.
                    format: int32
                    minimum: 0
                    type: integer
                  size:
                    anyOf:
                      - type: integer
                      - type: string
                    description: Size specifies the total size of volume group.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  snapCount:
                    description: SnapCount denotes number of snapshots in volume group.
                    format: int32
                    type: integer
                  uuid:
                    description: UUID denotes a unique identity of a lvm volume group.
                    minLength: 1
                    type: string
                required:
                  - allocationPolicy
                  - free
                  - lvCount
                  - maxLv
                  - maxPv
                  - metadataCount
                  - metadataFree
                  - metadataSize
                  - metadataUsedCount
                  - missingPvCount
                  - name
                  - permissions
                  - pvCount
                  - size
                  - snapCount
                  - uuid
                type: object
              type: array
          required:
            - volumeGroups
          type: object
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/lvm-localpv/charts/crds/templates/lvmsnapshot.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: lvmsnapshots.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMSnapshot
    listKind: LVMSnapshotList
    plural: lvmsnapshots
    singular: lvmsnapshot
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: LVMSnapshot represents an LVM Snapshot of the lvm volume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: LVMSnapshotSpec defines LVMSnapshot spec
              properties:
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the volume group is present which is where the snapshot has been provisioned. OwnerNodeID can not be edited after the snapshot has been provisioned.
                  minLength: 1
                  type: string
                snapSize:
                  description: SnapSize specifies the space reserved for the snapshot
                  type: string
                volGroup:
                  description: VolGroup specifies the name of the volume group where the snapshot has been created.
                  type: string
              required:
                - ownerNodeID
                - volGroup
              type: object
            status:
              description: SnapStatus string that reflects if the snapshot was created successfully
              properties:
                state:
                  type: string
              type: object
          required:
            - spec
            - status
          type: object
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/lvm-localpv/charts/crds/templates/lvmvolume.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: lvmvolumes.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMVolume
    listKind: LVMVolumeList
    plural: lvmvolumes
    shortNames:
      - lvmvol
    singular: lvmvolume
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: volume group where the volume is created
          jsonPath: .spec.volGroup
          name: VolGroup
          type: string
        - description: Node where the volume is created
          jsonPath: .spec.ownerNodeID
          name: Node
          type: string
        - description: Size of the volume
          jsonPath: .spec.capacity
          name: Size
          type: string
        - description: Status of the volume
          jsonPath: .status.state
          name: Status
          type: string
        - description: Age of the volume
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: LVMVolume represents a LVM based volume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: VolumeInfo defines LVM info
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the volume group is present which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                shared:
                  description: Shared specifies whether the volume can be shared among multiple pods. If it is not set to "yes", then the LVM LocalPV Driver will not allow the volumes to be mounted by more than one pods.
                  enum:
                    - "yes"
                    - "no"
                  type: string
                thinProvision:
                  description: ThinProvision specifies whether logical volumes can be thinly provisioned. If it is set to "yes", then the LVM LocalPV Driver will create thinProvision i.e. logical volumes that are larger than the available extents.
                  enum:
                    - "yes"
                    - "no"
                  type: string
                vgPattern:
                  description: VgPattern specifies the regex to choose volume groups where volume needs to be created.
                  type: string
                volGroup:
                  description: VolGroup specifies the name of the volume group where the volume has been created.
                  type: string
              required:
                - capacity
                - ownerNodeID
                - vgPattern
                - volGroup
              type: object
            status:
              description: VolStatus string that specifies the current state of the volume provisioning request.
              properties:
                error:
                  description: Error denotes the error occurred during provisioning/expanding a volume. Error field should only be set when State becomes Failed.
                  properties:
                    code:
                      description: VolumeErrorCode represents the error code to represent specific class of errors.
                      type: string
                    message:
                      type: string
                  type: object
                state:
                  description: State specifies the current state of the volume provisioning request. The state "Pending" means that the volume creation request has not processed yet. The state "Ready" means that the volume has been created and it is ready for the use. "Failed" means that volume provisioning has been failed and will not be retried by node agent controller.
                  enum:
                    - Pending
                    - Ready
                    - Failed
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/openebs-crds/templates/csi-volume-snapshot-class.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/814
    controller-gen.kubebuilder.io/version: v0.11.3
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: volumesnapshotclasses.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotClass
    listKind: VolumeSnapshotClassList
    plural: volumesnapshotclasses
    shortNames:
      - vsclass
      - vsclasses
    singular: volumesnapshotclass
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            deletionPolicy:
              description: deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
              enum:
                - Delete
                - Retain
              type: string
            driver:
              description: driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            parameters:
              additionalProperties:
                type: string
              description: parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
              type: object
          required:
            - deletionPolicy
            - driver
          type: object
      served: true
      storage: true
      subresources: {}
    - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      deprecated: true
      deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshotClass is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotClass
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            deletionPolicy:
              description: deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
              enum:
                - Delete
                - Retain
              type: string
            driver:
              description: driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            parameters:
              additionalProperties:
                type: string
              description: parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
              type: object
          required:
            - deletionPolicy
            - driver
          type: object
      served: false
      storage: false
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/openebs-crds/templates/csi-volume-snapshot-content.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/814
    controller-gen.kubebuilder.io/version: v0.11.3
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: volumesnapshotcontents.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotContent
    listKind: VolumeSnapshotContentList
    plural: volumesnapshotcontents
    shortNames:
      - vsc
      - vscs
    singular: volumesnapshotcontent
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
              properties:
                deletionPolicy:
                  description: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
                  enum:
                    - Delete
                    - Retain
                  type: string
                driver:
                  description: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
                  type: string
                source:
                  description: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
                  oneOf:
                    - required:
                        - snapshotHandle
                    - required:
                        - volumeHandle
                  properties:
                    snapshotHandle:
                      description: snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
                      type: string
                    volumeHandle:
                      description: volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
                      type: string
                  type: object
                sourceVolumeMode:
                  description: SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.
                  type: string
                volumeSnapshotClassName:
                  description: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
                  type: string
                volumeSnapshotRef:
                  description: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
              required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
              type: object
            status:
              description: status represents the current information of a snapshot.
              properties:
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
                  format: int64
                  type: integer
                error:
                  description: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  format: int64
                  minimum: 0
                  type: integer
                snapshotHandle:
                  description: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
                  type: string
                volumeGroupSnapshotContentName:
                  description: VolumeGroupSnapshotContentName is the name of the VolumeGroupSnapshotContent of which this VolumeSnapshotContent is a part of.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      deprecated: true
      deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshotContent is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotContent
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
              properties:
                deletionPolicy:
                  description: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
                  enum:
                    - Delete
                    - Retain
                  type: string
                driver:
                  description: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
                  type: string
                source:
                  description: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
                  properties:
                    snapshotHandle:
                      description: snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
                      type: string
                    volumeHandle:
                      description: volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
                      type: string
                  type: object
                volumeSnapshotClassName:
                  description: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
                  type: string
                volumeSnapshotRef:
                  description: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
              required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
              type: object
            status:
              description: status represents the current information of a snapshot.
              properties:
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
                  format: int64
                  type: integer
                error:
                  description: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  format: int64
                  minimum: 0
                  type: integer
                snapshotHandle:
                  description: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: false
      storage: false
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/openebs-crds/templates/csi-volume-snapshot.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/814
    controller-gen.kubebuilder.io/version: v0.11.3
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: volumesnapshots.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshot
    listKind: VolumeSnapshotList
    plural: volumesnapshots
    shortNames:
      - vs
    singular: volumesnapshot
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot object intends to bind to. Please note that verification of binding actually requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure both are pointing at each other. Binding MUST be verified prior to usage of this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: 'spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.'
              properties:
                source:
                  description: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
                  oneOf:
                    - required:
                        - persistentVolumeClaimName
                    - required:
                        - volumeSnapshotContentName
                  properties:
                    persistentVolumeClaimName:
                      description: persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
                      type: string
                    volumeSnapshotContentName:
                      description: volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
                      type: string
                  type: object
                volumeSnapshotClassName:
                  description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.'
                  type: string
              required:
                - source
              type: object
            status:
              description: status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
              properties:
                boundVolumeSnapshotContentName:
                  description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.'
                  type: string
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
                  format: date-time
                  type: string
                error:
                  description: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  type: string
                  x-kubernetes-int-or-string: true
                volumeGroupSnapshotName:
                  description: VolumeGroupSnapshotName is the name of the VolumeGroupSnapshot of which this VolumeSnapshot is a part of.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot object intends to bind to. Please note that verification of binding actually requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure both are pointing at each other. Binding MUST be verified prior to usage of this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      deprecated: true
      deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshot is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshot
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: 'spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.'
              properties:
                source:
                  description: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
                  properties:
                    persistentVolumeClaimName:
                      description: persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
                      type: string
                    volumeSnapshotContentName:
                      description: volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
                      type: string
                  type: object
                volumeSnapshotClassName:
                  description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.'
                  type: string
              required:
                - source
              type: object
            status:
              description: status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
              properties:
                boundVolumeSnapshotContentName:
                  description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.'
                  type: string
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
                  format: date-time
                  type: string
                error:
                  description: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  type: string
                  x-kubernetes-int-or-string: true
              type: object
          required:
            - spec
          type: object
      served: false
      storage: false
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/zfs-localpv/charts/crds/templates/zfsbackup.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: zfsbackups.zfs.openebs.io
spec:
  group: zfs.openebs.io
  names:
    kind: ZFSBackup
    listKind: ZFSBackupList
    plural: zfsbackups
    shortNames:
      - zb
    singular: zfsbackup
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: Previous snapshot for backup
          jsonPath: .spec.prevSnapName
          name: PrevSnap
          type: string
        - description: Backup status
          jsonPath: .status
          name: Status
          type: string
        - description: Age of the volume
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: ZFSBackup describes a zfs backup resource created as a custom resource
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ZFSBackupSpec is the spec for a ZFSBackup resource
              properties:
                backupDest:
                  description: BackupDest is the remote address for backup transfer
                  minLength: 1
                  pattern: ^([0-9]+.[0-9]+.[0-9]+.[0-9]+:[0-9]+)$
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is a name of the nodes where the source volume is
                  minLength: 1
                  type: string
                prevSnapName:
                  description: PrevSnapName is the last completed-backup's snapshot name
                  type: string
                snapName:
                  description: SnapName is the snapshot name for backup
                  minLength: 1
                  type: string
                volumeName:
                  description: VolumeName is a name of the volume for which this backup is destined
                  minLength: 1
                  type: string
              required:
                - backupDest
                - ownerNodeID
                - volumeName
              type: object
            status:
              description: ZFSBackupStatus is to hold status of backup
              enum:
                - Init
                - Done
                - Failed
                - Pending
                - InProgress
                - Invalid
              type: string
          required:
            - spec
            - status
          type: object
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/zfs-localpv/charts/crds/templates/zfsnode.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: zfsnodes.zfs.openebs.io
spec:
  group: zfs.openebs.io
  names:
    kind: ZFSNode
    listKind: ZFSNodeList
    plural: zfsnodes
    shortNames:
      - zfsnode
    singular: zfsnode
  scope: Namespaced
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: ZFSNode records information about all zfs pools available in a node. In general, the openebs node-agent creates the ZFSNode object & periodically synchronizing the zfs pools available in the node. ZFSNode has an owner reference pointing to the corresponding node object.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            pools:
              items:
                description: Pool specifies attributes of a given zfs pool that exists on the node.
                properties:
                  free:
                    anyOf:
                      - type: integer
                      - type: string
                    description: Free specifies the available capacity of zfs pool.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  used:
                    anyOf:
                      - type: integer
                      - type: string
                    description: Used specifies the used capacity of zfs pool.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  name:
                    description: Name of the zfs pool.
                    minLength: 1
                    type: string
                  uuid:
                    description: UUID denotes a unique identity of a zfs pool.
                    minLength: 1
                    type: string
                required:
                  - free
                  - used
                  - name
                  - uuid
                type: object
              type: array
          required:
            - pools
          type: object
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/zfs-localpv/charts/crds/templates/zfsrestore.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: zfsrestores.zfs.openebs.io
spec:
  group: zfs.openebs.io
  names:
    kind: ZFSRestore
    listKind: ZFSRestoreList
    plural: zfsrestores
    singular: zfsrestore
  scope: Namespaced
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: ZFSRestore describes a cstor restore resource created as a custom resource
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ZFSRestoreSpec is the spec for a ZFSRestore resource
              properties:
                ownerNodeID:
                  description: owner node name where restore volume is present
                  minLength: 1
                  type: string
                restoreSrc:
                  description: it can be ip:port in case of restore from remote or volumeName in case of local restore
                  minLength: 1
                  pattern: ^([0-9]+.[0-9]+.[0-9]+.[0-9]+:[0-9]+)$
                  type: string
                volumeName:
                  description: volume name to where restore has to be performed
                  minLength: 1
                  type: string
              required:
                - ownerNodeID
                - restoreSrc
                - volumeName
              type: object
            status:
              description: ZFSRestoreStatus is to hold result of action.
              enum:
                - Init
                - Done
                - Failed
                - Pending
                - InProgress
                - Invalid
              type: string
            volSpec:
              description: VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                compression:
                  description: 'Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value "on" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with "off" and the next day the compression was modified to "on", the data written prior to setting "on" will not be compressed. Default Value: off.'
                  pattern: ^(on|off|lzjb|zstd|zstd-[1-9]|zstd-1[0-9]|gzip|gzip-[1-9]|zle|lz4)$
                  type: string
                dedup:
                  description: 'Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.'
                  enum:
                    - "on"
                    - "off"
                  type: string
                encryption:
                  description: 'Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.'
                  pattern: ^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$
                  type: string
                fsType:
                  description: 'FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as "zfs", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.'
                  type: string
                keyformat:
                  description: KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.
                  enum:
                    - passphrase
                    - raw
                    - hex
                  type: string
                keylocation:
                  description: KeyLocation is the location of key for the encryption
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                poolName:
                  description: poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                recordsize:
                  description: 'Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system''s recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.'
                  minLength: 1
                  type: string
                shared:
                  description: Shared specifies whether the volume can be shared among multiple pods. If it is not set to "yes", then the ZFS-LocalPV Driver will not allow the volumes to be mounted by more than one pods.
                  enum:
                    - "yes"
                    - "no"
                  type: string
                snapname:
                  description: SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.
                  type: string
                thinProvision:
                  description: 'ThinProvision describes whether space reservation for the source volume is required or not. The value "yes" indicates that volume should be thin provisioned and "no" means thick provisioning of the volume. If thinProvision is set to "yes" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to "no" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.'
                  enum:
                    - "yes"
                    - "no"
                  type: string
                volblocksize:
                  description: 'VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.'
                  minLength: 1
                  type: string
                volumeType:
                  description: volumeType determines whether the volume is of type "DATASET" or "ZVOL". If fstype provided in the storageclass is "zfs", a volume of type dataset will be created. If "ext4", "ext3", "ext2" or "xfs" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.
                  enum:
                    - ZVOL
                    - DATASET
                  type: string
              required:
                - capacity
                - ownerNodeID
                - poolName
                - volumeType
              type: object
          required:
            - spec
            - status
          type: object
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/zfs-localpv/charts/crds/templates/zfssnapshot.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: zfssnapshots.zfs.openebs.io
spec:
  group: zfs.openebs.io
  names:
    kind: ZFSSnapshot
    listKind: ZFSSnapshotList
    plural: zfssnapshots
    shortNames:
      - zfssnap
    singular: zfssnapshot
  scope: Namespaced
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: ZFSSnapshot represents a ZFS Snapshot of the zfsvolume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                compression:
                  description: 'Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value "on" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with "off" and the next day the compression was modified to "on", the data written prior to setting "on" will not be compressed. Default Value: off.'
                  pattern: ^(on|off|lzjb|zstd|zstd-[1-9]|zstd-1[0-9]|gzip|gzip-[1-9]|zle|lz4)$
                  type: string
                dedup:
                  description: 'Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.'
                  enum:
                    - "on"
                    - "off"
                  type: string
                encryption:
                  description: 'Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.'
                  pattern: ^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$
                  type: string
                fsType:
                  description: 'FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as "zfs", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.'
                  type: string
                keyformat:
                  description: KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.
                  enum:
                    - passphrase
                    - raw
                    - hex
                  type: string
                keylocation:
                  description: KeyLocation is the location of key for the encryption
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                poolName:
                  description: poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                recordsize:
                  description: 'Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system''s recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.'
                  minLength: 1
                  type: string
                shared:
                  description: Shared specifies whether the volume can be shared among multiple pods. If it is not set to "yes", then the ZFS-LocalPV Driver will not allow the volumes to be mounted by more than one pods.
                  enum:
                    - "yes"
                    - "no"
                  type: string
                snapname:
                  description: SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.
                  type: string
                thinProvision:
                  description: 'ThinProvision describes whether space reservation for the source volume is required or not. The value "yes" indicates that volume should be thin provisioned and "no" means thick provisioning of the volume. If thinProvision is set to "yes" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to "no" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.'
                  enum:
                    - "yes"
                    - "no"
                  type: string
                volblocksize:
                  description: 'VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.'
                  minLength: 1
                  type: string
                volumeType:
                  description: volumeType determines whether the volume is of type "DATASET" or "ZVOL". If fstype provided in the storageclass is "zfs", a volume of type dataset will be created. If "ext4", "ext3", "ext2" or "xfs" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.
                  enum:
                    - ZVOL
                    - DATASET
                  type: string
              required:
                - capacity
                - ownerNodeID
                - poolName
                - volumeType
              type: object
            status:
              description: SnapStatus string that reflects if the snapshot was created successfully
              properties:
                state:
                  type: string
              type: object
          required:
            - spec
            - status
          type: object
      served: true
      storage: true
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ZFSSnapshot represents a ZFS Snapshot of the zfsvolume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                compression:
                  description: 'Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value "on" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with "off" and the next day the compression was modified to "on", the data written prior to setting "on" will not be compressed. Default Value: off.'
                  pattern: ^(on|off|lzjb|gzip|gzip-[1-9]|zle|lz4)$
                  type: string
                dedup:
                  description: 'Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.'
                  enum:
                    - "on"
                    - "off"
                  type: string
                encryption:
                  description: 'Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.'
                  pattern: ^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$
                  type: string
                fsType:
                  description: 'FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as "zfs", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.'
                  type: string
                keyformat:
                  description: KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.
                  enum:
                    - passphrase
                    - raw
                    - hex
                  type: string
                keylocation:
                  description: KeyLocation is the location of key for the encryption
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                poolName:
                  description: poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                recordsize:
                  description: 'Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system''s recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.'
                  minLength: 1
                  type: string
                snapname:
                  description: SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.
                  type: string
                thinProvision:
                  description: 'ThinProvision describes whether space reservation for the source volume is required or not. The value "yes" indicates that volume should be thin provisioned and "no" means thick provisioning of the volume. If thinProvision is set to "yes" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to "no" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.'
                  enum:
                    - "yes"
                    - "no"
                  type: string
                volblocksize:
                  description: 'VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.'
                  minLength: 1
                  type: string
                volumeType:
                  description: volumeType determines whether the volume is of type "DATASET" or "ZVOL". If fstype provided in the storageclass is "zfs", a volume of type dataset will be created. If "ext4", "ext3", "ext2" or "xfs" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.
                  enum:
                    - ZVOL
                    - DATASET
                  type: string
              required:
                - capacity
                - ownerNodeID
                - poolName
                - volumeType
              type: object
            status:
              description: SnapStatus string that reflects if the snapshot was created successfully
              properties:
                state:
                  type: string
              type: object
          required:
            - spec
            - status
          type: object
      served: true
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/zfs-localpv/charts/crds/templates/zfsvolume.yaml
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
    helm.sh/resource-policy: keep
  creationTimestamp: null
  name: zfsvolumes.zfs.openebs.io
spec:
  group: zfs.openebs.io
  names:
    kind: ZFSVolume
    listKind: ZFSVolumeList
    plural: zfsvolumes
    shortNames:
      - zfsvol
      - zv
    singular: zfsvolume
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: ZFS Pool where the volume is created
          jsonPath: .spec.poolName
          name: ZPool
          type: string
        - description: Node where the volume is created
          jsonPath: .spec.ownerNodeID
          name: NodeID
          type: string
        - description: Size of the volume
          jsonPath: .spec.capacity
          name: Size
          type: string
        - description: Status of the volume
          jsonPath: .status.state
          name: Status
          type: string
        - description: filesystem created on the volume
          jsonPath: .spec.fsType
          name: Filesystem
          type: string
        - description: Age of the volume
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: ZFSVolume represents a ZFS based volume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                compression:
                  description: 'Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value "on" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with "off" and the next day the compression was modified to "on", the data written prior to setting "on" will not be compressed. Default Value: off.'
                  pattern: ^(on|off|lzjb|zstd|zstd-[1-9]|zstd-1[0-9]|gzip|gzip-[1-9]|zle|lz4)$
                  type: string
                dedup:
                  description: 'Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.'
                  enum:
                    - "on"
                    - "off"
                  type: string
                encryption:
                  description: 'Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.'
                  pattern: ^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$
                  type: string
                fsType:
                  description: 'FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as "zfs", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.'
                  type: string
                keyformat:
                  description: KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.
                  enum:
                    - passphrase
                    - raw
                    - hex
                  type: string
                keylocation:
                  description: KeyLocation is the location of key for the encryption
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                poolName:
                  description: poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                recordsize:
                  description: 'Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system''s recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.'
                  minLength: 1
                  type: string
                shared:
                  description: Shared specifies whether the volume can be shared among multiple pods. If it is not set to "yes", then the ZFS-LocalPV Driver will not allow the volumes to be mounted by more than one pods.
                  enum:
                    - "yes"
                    - "no"
                  type: string
                snapname:
                  description: SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.
                  type: string
                thinProvision:
                  description: 'ThinProvision describes whether space reservation for the source volume is required or not. The value "yes" indicates that volume should be thin provisioned and "no" means thick provisioning of the volume. If thinProvision is set to "yes" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to "no" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.'
                  enum:
                    - "yes"
                    - "no"
                  type: string
                volblocksize:
                  description: 'VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.'
                  minLength: 1
                  type: string
                volumeType:
                  description: volumeType determines whether the volume is of type "DATASET" or "ZVOL". If fstype provided in the storageclass is "zfs", a volume of type dataset will be created. If "ext4", "ext3", "ext2" or "xfs" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.
                  enum:
                    - ZVOL
                    - DATASET
                  type: string
              required:
                - capacity
                - ownerNodeID
                - poolName
                - volumeType
              type: object
            status:
              description: VolStatus string that specifies the current state of the volume provisioning request.
              properties:
                state:
                  description: State specifies the current state of the volume provisioning request. The state "Pending" means that the volume creation request has not processed yet. The state "Ready" means that the volume has been created and it is ready for the use.
                  enum:
                    - Pending
                    - Ready
                    - Failed
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources: {}
    - additionalPrinterColumns:
        - description: ZFS Pool where the volume is created
          jsonPath: .spec.poolName
          name: ZPool
          type: string
        - description: Node where the volume is created
          jsonPath: .spec.ownerNodeID
          name: Node
          type: string
        - description: Size of the volume
          jsonPath: .spec.capacity
          name: Size
          type: string
        - description: Status of the volume
          jsonPath: .status.state
          name: Status
          type: string
        - description: filesystem created on the volume
          jsonPath: .spec.fsType
          name: Filesystem
          type: string
        - description: Age of the volume
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ZFSVolume represents a ZFS based volume
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: VolumeInfo defines ZFS volume parameters for all modes in which ZFS volumes can be created like - ZFS volume with filesystem, ZFS Volume exposed as zfs or ZFS volume exposed as raw block device. Some of the parameters can be only set during creation time (as specified in the details of the parameter), and a few are editable. In case of Cloned volumes, the parameters are assigned the same values as the source volume.
              properties:
                capacity:
                  description: Capacity of the volume
                  minLength: 1
                  type: string
                compression:
                  description: 'Compression specifies the block-level compression algorithm to be applied to the ZFS Volume. The value "on" indicates ZFS to use the default compression algorithm. The default compression algorithm used by ZFS will be either lzjb or, if the lz4_compress feature is enabled, lz4. Compression property can be edited after the volume has been created. The change will only be applied to the newly-written data. For instance, if the Volume was created with "off" and the next day the compression was modified to "on", the data written prior to setting "on" will not be compressed. Default Value: off.'
                  pattern: ^(on|off|lzjb|gzip|gzip-[1-9]|zle|lz4)$
                  type: string
                dedup:
                  description: 'Deduplication is the process for removing redundant data at the block level, reducing the total amount of data stored. If a file system has the dedup property enabled, duplicate data blocks are removed synchronously. The result is that only unique data is stored and common components are shared among files. Deduplication can consume significant processing power (CPU) and memory as well as generate additional disk IO. Before creating a pool with deduplication enabled, ensure that you have planned your hardware requirements appropriately and implemented appropriate recovery practices, such as regular backups. As an alternative to deduplication consider using compression=lz4, as a less resource-intensive alternative. should be enabled on the zvol. Dedup property can be edited after the volume has been created. Default Value: off.'
                  enum:
                    - "on"
                    - "off"
                  type: string
                encryption:
                  description: 'Enabling the encryption feature allows for the creation of encrypted filesystems and volumes. ZFS will encrypt file and zvol data, file attributes, ACLs, permission bits, directory listings, FUID mappings, and userused / groupused data. ZFS will not encrypt metadata related to the pool structure, including dataset and snapshot names, dataset hierarchy, properties, file size, file holes, and deduplication tables (though the deduplicated data itself is encrypted). Default Value: off.'
                  pattern: ^(on|off|aes-128-[c,g]cm|aes-192-[c,g]cm|aes-256-[c,g]cm)$
                  type: string
                fsType:
                  description: 'FsType specifies filesystem type for the zfs volume/dataset. If FsType is provided as "zfs", then the driver will create a ZFS dataset, formatting is not required as underlying filesystem is ZFS anyway. If FsType is ext2, ext3, ext4 or xfs, then the driver will create a ZVOL and format the volume accordingly. FsType can not be modified once volume has been provisioned. Default Value: ext4.'
                  type: string
                keyformat:
                  description: KeyFormat specifies format of the encryption key The supported KeyFormats are passphrase, raw, hex.
                  enum:
                    - passphrase
                    - raw
                    - hex
                  type: string
                keylocation:
                  description: KeyLocation is the location of key for the encryption
                  type: string
                ownerNodeID:
                  description: OwnerNodeID is the Node ID where the ZPOOL is running which is where the volume has been provisioned. OwnerNodeID can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                poolName:
                  description: poolName specifies the name of the pool where the volume has been created. PoolName can not be edited after the volume has been provisioned.
                  minLength: 1
                  type: string
                recordsize:
                  description: 'Specifies a suggested block size for files in the file system. The size specified must be a power of two greater than or equal to 512 and less than or equal to 128 Kbytes. RecordSize property can be edited after the volume has been created. Changing the file system''s recordsize affects only files created afterward; existing files are unaffected. Default Value: 128k.'
                  minLength: 1
                  type: string
                snapname:
                  description: SnapName specifies the name of the snapshot where the volume has been cloned from. Snapname can not be edited after the volume has been provisioned.
                  type: string
                thinProvision:
                  description: 'ThinProvision describes whether space reservation for the source volume is required or not. The value "yes" indicates that volume should be thin provisioned and "no" means thick provisioning of the volume. If thinProvision is set to "yes" then volume can be provisioned even if the ZPOOL does not have the enough capacity. If thinProvision is set to "no" then volume can be provisioned only if the ZPOOL has enough capacity and capacity required by volume can be reserved. ThinProvision can not be modified once volume has been provisioned. Default Value: no.'
                  enum:
                    - "yes"
                    - "no"
                  type: string
                volblocksize:
                  description: 'VolBlockSize specifies the block size for the zvol. The volsize can only be set to a multiple of volblocksize, and cannot be zero. VolBlockSize can not be edited after the volume has been provisioned. Default Value: 8k.'
                  minLength: 1
                  type: string
                volumeType:
                  description: volumeType determines whether the volume is of type "DATASET" or "ZVOL". If fstype provided in the storageclass is "zfs", a volume of type dataset will be created. If "ext4", "ext3", "ext2" or "xfs" is mentioned as fstype in the storageclass, then a volume of type zvol will be created, which will be further formatted as the fstype provided in the storageclass. VolumeType can not be modified once volume has been provisioned.
                  enum:
                    - ZVOL
                    - DATASET
                  type: string
              required:
                - capacity
                - ownerNodeID
                - poolName
                - volumeType
              type: object
            status:
              description: VolStatus string that specifies the current state of the volume provisioning request.
              properties:
                state:
                  description: State specifies the current state of the volume provisioning request. The state "Pending" means that the volume creation request has not processed yet. The state "Ready" means that the volume has been created and it is ready for the use.
                  enum:
                    - Pending
                    - Ready
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: false
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openebs/charts/localpv-provisioner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-localpv-provisioner
  labels:
    chart: localpv-provisioner-4.1.0
    heritage: Helm
    openebs.io/version: "4.1.0"
    app: localpv-provisioner
    release: openebs
    component: "localpv-provisioner"
    openebs.io/component-name: openebs-localpv-provisioner
rules:
  - apiGroups: ["*"]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["*"]
    resources: ["namespaces", "pods", "events", "endpoints"]
    verbs: ["*"]
  - apiGroups: ["*"]
    resources: ["resourcequotas", "limitranges"]
    verbs: ["list", "watch"]
  - apiGroups: ["*"]
    resources: ["storageclasses", "persistentvolumeclaims", "persistentvolumes"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "delete", "patch"]
  - apiGroups: ["openebs.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "create", "update"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-provisioner-role
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "services"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csistoragecapacities"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["local.openebs.io"]
    resources: ["lvmvolumes", "lvmsnapshots", "lvmnodes"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-snapshotter-role
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-driver-registrar-role
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    name: "openebs-lvm-node"
    release: openebs
    openebs.io/component-name: "openebs-lvm-node"
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes", "services"]
    verbs: ["get", "list"]
  - apiGroups: ["local.openebs.io"]
    resources: ["lvmvolumes", "lvmsnapshots", "lvmnodes"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-promtail
  labels:
    helm.sh/chart: promtail-6.13.1
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.8.3"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-cluster-role
  labels:
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
rules:
  # must create mayastor crd if it doesn't exist, replace if exist,
  # merge schema to existing CRD.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "get", "update", "list", "patch", "replace"]
    # must update stored_version in status to include new schema only.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions/status"]
    verbs: ["get", "update", "patch"]
    # must read mayastorpools info. This is needed to handle upgrades from v1.
  - apiGroups: ["openebs.io"]
    resources: ["mayastorpools"]
    verbs: ["get", "list", "patch", "delete", "deletecollection"]
    # must read diskpool info
  - apiGroups: ["openebs.io"]
    resources: ["diskpools"]
    verbs: ["get", "list", "watch", "update", "replace", "patch", "create"]
    # must update diskpool status
  - apiGroups: ["openebs.io"]
    resources: ["diskpools/status"]
    verbs: ["update", "patch"]
    # must read cm info
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "update", "patch"]
    # must get deployments info
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list"]
    # external provisioner & attacher
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "create", "delete", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "patch"]
    # external provisioner
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
    # external-resizer
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["patch"]
    # external snapshotter and snapshot-controller
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
    # external attacher
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
    # CSI nodes must be listed
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
    # get kube-system namespace to retrieve Uid
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-provisioner-role
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "services"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csistoragecapacities"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["*"]
    resources: ["zfsvolumes", "zfssnapshots", "zfsbackups", "zfsrestores", "zfsnodes"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-snapshotter-role
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-driver-registrar-role
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: openebs
    openebs.io/component-name: "openebs-zfs-node"
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes", "services"]
    verbs: ["get", "list"]
  - apiGroups: ["*"]
    resources: ["zfsvolumes", "zfssnapshots", "zfsbackups", "zfsrestores", "zfsnodes"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Source: openebs/charts/localpv-provisioner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-localpv-provisioner
  labels:
    chart: localpv-provisioner-4.1.0
    heritage: Helm
    openebs.io/version: "4.1.0"
    app: localpv-provisioner
    release: openebs
    component: "localpv-provisioner"
    openebs.io/component-name: openebs-localpv-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openebs-localpv-provisioner
subjects:
  - kind: ServiceAccount
    name: openebs-localpv-provisioner
    namespace: openebs
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-provisioner-binding
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-lvm-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-snapshotter-binding
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-lvm-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-driver-registrar-binding
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    name: "openebs-lvm-node"
    release: openebs
    openebs.io/component-name: "openebs-lvm-node"
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-node-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-lvm-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-promtail
  labels:
    helm.sh/chart: promtail-6.13.1
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.8.3"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: openebs-promtail
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-promtail
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-cluster-role-binding
  labels:
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
subjects:
  - kind: ServiceAccount
    name: openebs-service-account
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-provisioner-binding
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-snapshotter-binding
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-driver-registrar-binding
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: openebs
    openebs.io/component-name: "openebs-zfs-node"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-node-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-loki
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-loki
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openebs-loki
subjects:
  - kind: ServiceAccount
    name: openebs-loki
---
# Source: openebs/charts/lvm-localpv/templates/lvm-node-service.yaml
apiVersion: v1
metadata:
  name: openebs-lvm-localpv-node-service
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    name: "openebs-lvm-node"
    release: openebs
    openebs.io/component-name: "openebs-lvm-node"
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9500
      targetPort: 9500
  selector:
    app: openebs-lvm-node
---
# Source: openebs/charts/mayastor/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
metadata:
  name: openebs-etcd-headless
  namespace: "openebs"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.6.0
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/managed-by: Helm
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: client
    - name: peer
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: openebs
---
# Source: openebs/charts/mayastor/charts/etcd/templates/svc.yaml
apiVersion: v1
metadata:
  name: openebs-etcd
  namespace: "openebs"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.6.0
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/instance: openebs
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/service-headless.yaml
apiVersion: v1
metadata:
  name: openebs-loki-headless
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
    variant: headless
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: openebs
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/service-memberlist.yaml
apiVersion: v1
metadata:
  name: openebs-loki-memberlist
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 7946
      targetPort: memberlist-port
      protocol: TCP
  selector:
    app: loki
    release: openebs
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/service.yaml
apiVersion: v1
metadata:
  name: openebs-loki
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
  annotations: {}
spec:
  type: ClusterIP
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: openebs
---
# Source: openebs/charts/mayastor/charts/nats/templates/service.yaml
apiVersion: v1
metadata:
  name: openebs-nats
  namespace: openebs
  labels:
    helm.sh/chart: nats-0.19.14
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.9.17"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 4222
      appProtocol: tcp
    - name: cluster
      port: 6222
      appProtocol: tcp
    - name: monitor
      port: 8222
      appProtocol: http
    - name: metrics
      port: 7777
      appProtocol: http
    - name: leafnodes
      port: 7422
      appProtocol: tcp
    - name: gateways
      port: 7522
      appProtocol: tcp
---
# Source: openebs/charts/mayastor/templates/mayastor/agents/core/agent-core-service.yaml
apiVersion: v1
metadata:
  name: openebs-agent-core
  labels:
    app: agent-core
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  selector:
    app: agent-core
    openebs.io/release: openebs
  ports:
    - name: grpc
      port: 50051
    - name: ha-cluster
      port: 50052
---
# Source: openebs/charts/mayastor/templates/mayastor/apis/api-rest-service.yaml
apiVersion: v1
metadata:
  name: openebs-api-rest
  labels:
    app: api-rest
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  type: ClusterIP
  selector:
    app: api-rest
    openebs.io/release: openebs
  ports:
    - port: 8080
      name: https
      targetPort: 8080
      protocol: TCP
    - port: 8081
      name: http
      targetPort: 8081
      protocol: TCP
---
# Source: openebs/charts/mayastor/templates/mayastor/metrics/metrics-exporter-io-engine-service.yaml
apiVersion: v1
metadata:
  name: openebs-metrics-exporter-io-engine
  labels:
    app: metrics-exporter-io-engine
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  ports:
    - name: metrics
      port: 9502
      targetPort: 9502
      protocol: TCP
  selector:
    app: io-engine
    openebs.io/release: openebs
---
# Source: openebs/charts/mayastor/templates/mayastor/obs/stats-service.yaml
apiVersion: v1
metadata:
  name: openebs-obs-callhome-stats
  labels:
    app: obs-callhome
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  ports:
    - port: 9090
      name: https
      targetPort: 9090
      protocol: TCP
    - port: 9091
      name: http
      targetPort: 9091
      protocol: TCP
  selector:
    app: obs-callhome
    openebs.io/release: openebs
---
apiVersion: apps/v1
metadata:
  name: openebs-lvm-localpv-node
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    name: "openebs-lvm-node"
    release: openebs
    openebs.io/component-name: "openebs-lvm-node"
spec:
  selector:
    matchLabels:
      name: "openebs-lvm-node"
      release: openebs
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: lvm-localpv-1.6.0
        heritage: Helm
        openebs.io/version: "1.6.0"
        role: "openebs-lvm"
        name: "openebs-lvm-node"
        release: openebs
        openebs.io/component-name: "openebs-lvm-node"
        app: openebs-lvm-node
    spec:
      priorityClassName: openebs-lvm-localpv-csi-node-critical
      serviceAccountName: openebs-lvm-node-sa
      hostNetwork: false
      containers:
        - name: csi-node-driver-registrar
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.8.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/lvm-localpv /registration/lvm-localpv-reg.sock"]
          env:
            - name: ADDRESS
              value: /plugin/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: "/var/lib/kubelet/plugins/lvm-localpv/csi.sock"
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_DRIVER
              value: openebs-lvm
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
          resources: {}
        - name: openebs-lvm-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: "openebs/lvm-driver:1.6.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--nodeid=$(OPENEBS_NODE_ID)"
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_NODE_DRIVER)"
            - "--kube-api-qps=0"
            - "--kube-api-burst=0"
            - "--listen-address=$(METRICS_LISTEN_ADDRESS)"
          env:
            - name: OPENEBS_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///plugin/csi.sock
            - name: OPENEBS_NODE_DRIVER
              value: agent
            - name: LVM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_LISTEN_ADDRESS
              value: :9500
            - name: ALLOWED_TOPOLOGIES
              value: kubernetes.io/hostname,
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: device-dir
              mountPath: /dev
            - name: pods-mount-dir
              mountPath: "/var/lib/kubelet/"
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
          resources: {}
      volumes:
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: registration-dir
          hostPath:
            path: "/var/lib/kubelet/plugins_registry/"
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: "/var/lib/kubelet/plugins/lvm-localpv/"
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: "/var/lib/kubelet/"
            type: Directory
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/promtail/templates/daemonset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-promtail
  namespace: openebs
  labels:
    helm.sh/chart: promtail-6.13.1
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.8.3"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: promtail
      app.kubernetes.io/instance: openebs
  updateStrategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: promtail
        app.kubernetes.io/instance: openebs
      annotations:
        checksum/config: e67cf0d4573abbc19bbd0798f5a6dfeaa0bb173cca295c7523f09b09ba9fb133
    spec:
      serviceAccountName: openebs-promtail
      enableServiceLinks: true
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      containers:
        - name: promtail
          image: "docker.io/grafana/promtail:2.8.3"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/promtail/promtail.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - mountPath: /run/promtail
              name: run
            - mountPath: /var/lib/docker/containers
              name: containers
              readOnly: true
            - mountPath: /var/log/pods
              name: pods
              readOnly: true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http-metrics
              containerPort: 3101
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: '/ready'
              port: http-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: config
          secret:
            secretName: openebs-promtail
        - hostPath:
            path: /run/promtail
          name: run
        - hostPath:
            path: /var/lib/docker/containers
          name: containers
        - hostPath:
            path: /var/log/pods
          name: pods
---
# Source: openebs/charts/mayastor/templates/mayastor/agents/ha/ha-node-daemonset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-agent-ha-node
  labels:
    app: agent-ha-node
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  selector:
    matchLabels:
      app: agent-ha-node
      openebs.io/release: openebs
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: agent-ha-node
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-agent-core 50052; do date; echo "Waiting for agent-cluster-grpc services..."; sleep 1; done;
          image: busybox:latest
          name: agent-cluster-grpc-probe
      imagePullSecrets:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: agent-ha-node
          image: "docker.io/openebs/mayastor-agent-ha-node:v2.7.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          env:
            - name: RUST_LOG
              value: info
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: RUST_BACKTRACE
              value: "1"
          args:
            - "--node-name=$(MY_NODE_NAME)"
            - "--csi-socket=/csi/csi.sock"
            - "--grpc-endpoint=$(MY_POD_IP):50053"
            - "--cluster-agent=https://openebs-agent-core:50052"
            - "--events-url=nats://openebs-nats:4222"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
          volumeMounts:
            - name: device
              mountPath: /dev
            - name: sys
              mountPath: /sys
            - name: run-udev
              mountPath: /run/udev
            - name: plugin-dir
              mountPath: /csi
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "100m"
              memory: "64Mi"
          ports:
            - containerPort: 50053
              protocol: TCP
              name: ha-node
      volumes:
        - name: device
          hostPath:
            path: /dev
            type: Directory
        - name: sys
          hostPath:
            path: /sys
            type: Directory
        - name: run-udev
          hostPath:
            path: /run/udev
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/io.openebs.mayastor/
            type: DirectoryOrCreate
---
# Source: openebs/charts/mayastor/templates/mayastor/csi/csi-node-daemonset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-csi-node
  labels:
    app: csi-node
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
    openebs.io/csi-node: mayastor
spec:
  selector:
    matchLabels:
      app: csi-node
      openebs.io/release: openebs
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: csi-node
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      serviceAccount: openebs-service-account
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      imagePullSecrets:
      nodeSelector:
        kubernetes.io/arch: amd64
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until $(lsmod | grep nvme_tcp &>/dev/null); do [ -z "$WARNED" ] && echo "nvme_tcp module not loaded..."; WARNED=1; sleep 60; done;
          image: busybox:latest
          name: nvme-tcp-probe
      # NOTE: Each container must have mem/cpu limits defined in order to
      # belong to Guaranteed QoS class, hence can never get evicted in case of
      # pressure unless they exceed those limits. limits and requests must be
      # the same.
      containers:
        - name: csi-node
          image: "docker.io/openebs/mayastor-csi-node:v2.7.0"
          imagePullPolicy: IfNotPresent
          # we need privileged because we mount filesystems and use mknod
          securityContext:
            privileged: true
          env:
            - name: RUST_LOG
              value: info
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: RUST_BACKTRACE
              value: "1"
          args:
            - "--csi-socket=/csi/csi.sock"
            - "--node-name=$(MY_NODE_NAME)"
            - "--rest-endpoint=http://openebs-api-rest:8081"
            - "--enable-registration"
            - "--grpc-endpoint=$(MY_POD_IP):10199"
            - "--nvme-io-timeout=110s10s"
            - "--nvme-core-io-timeout=110s10s"
            - "--nvme-ctrl-loss-tmo=1980"
            - "--nvme-nr-io-queues=2"
            - "--node-selector=openebs.io/csi-node=mayastor"
            - "--fmt-style=pretty"
            - "--ansi-colors=true"
          command:
            - csi-node
          volumeMounts:
            - name: device
              mountPath: /dev
            - name: sys
              mountPath: /sys
            - name: run-udev
              mountPath: /run/udev
            - name: plugin-dir
              mountPath: /csi
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
          resources:
            limits:
              cpu: "100m"
              memory: "128Mi"
            requests:
              cpu: "100m"
              memory: "64Mi"
        - name: csi-driver-registrar
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.10.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/io.openebs.mayastor/csi.sock"
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources:
            limits:
              cpu: "100m"
              memory: "50Mi"
            requests:
              cpu: "100m"
              memory: "50Mi"
          # Mayastor node plugin gRPC server
          ports:
            - containerPort: 10199
              protocol: TCP
              name: mayastor-node
      volumes:
        - name: device
          hostPath:
            path: /dev
            type: Directory
        - name: sys
          hostPath:
            path: /sys
            type: Directory
        - name: run-udev
          hostPath:
            path: /run/udev
            type: Directory
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/io.openebs.mayastor/
            type: DirectoryOrCreate
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
---
# Source: openebs/charts/mayastor/templates/mayastor/io/io-engine-daemonset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-io-engine
  labels:
    app: io-engine
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  selector:
    matchLabels:
      app: io-engine
      openebs.io/release: openebs
  updateStrategy:
    type: OnDelete
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: io-engine
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      imagePullSecrets:
      hostNetwork: true
      # To resolve services in the namespace
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        kubernetes.io/arch: amd64
        openebs.io/engine: mayastor
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-agent-core 50051; do date; echo "Waiting for agent-core-grpc services..."; sleep 1; done;
          image: busybox:latest
          name: agent-core-grpc-probe
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-etcd 2379; do date; echo "Waiting for etcd..."; sleep 1; done;
          image: busybox:latest
          name: etcd-probe
      containers:
        - name: metrics-exporter-io-engine
          image: "docker.io/openebs/mayastor-metrics-exporter-io-engine:v2.7.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 9502
              protocol: TCP
              name: metrics
          args:
            - "--fmt-style=pretty"
            - "--ansi-colors=true"
        - name: io-engine
          image: "docker.io/openebs/mayastor-io-engine:v2.7.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: RUST_LOG
              value: info
            - name: NVMF_TCP_MAX_QPAIRS_PER_CTRL
              value: "32"
            - name: NVMF_TCP_MAX_QUEUE_DEPTH
              value: "32"
            - name: NVME_TIMEOUT
              value: "110s"
            - name: NVME_TIMEOUT_ADMIN
              value: "30s"
            - name: NVME_KATO
              value: "10s"
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NEXUS_NVMF_ANA_ENABLE
              value: "1"
            - name: NEXUS_NVMF_RESV_ENABLE
              value: "1"
          args:
            # The -l argument accepts cpu-list. Indexing starts at zero.
            # For example -l 1,2,10-20 means use core 1, 2, 10 to 20.
            # Note: Ensure that the CPU resources are updated accordingly.
            #       If you use 2 CPUs, the CPU: field should also read 2.
            - "-g$(MY_POD_IP)"
            - "-N$(MY_NODE_NAME)"
            - "-Rhttps://openebs-agent-core:50051"
            - "-y/var/local/openebs/io-engine/config.yaml"
            - "-l1,2"
            - "-p=openebs-etcd:2379"
            - "--ptpl-dir=/var/local/openebs/io-engine/ptpl/"
            - "--api-versions=v1"
            - "--tgt-crdt=30"
            - "--events-url=nats://openebs-nats:4222"
          command:
            - io-engine
          securityContext:
            privileged: true
          volumeMounts:
            - name: device
              mountPath: /dev
            - name: udev
              mountPath: /run/udev
            - name: dshm
              mountPath: /dev/shm
            - name: configlocation
              mountPath: /var/local/openebs/io-engine/
            - name: hugepage
              mountPath: /dev/hugepages
          resources:
            limits:
              cpu: "2"
              memory: "1Gi"
              hugepages-2Mi: "2Gi"
            requests:
              cpu: "2"
              memory: "1Gi"
              hugepages-2Mi: "2Gi"
          ports:
            - containerPort: 10124
              protocol: TCP
              name: io-engine
      volumes:
        - name: device
          hostPath:
            path: /dev
            type: Directory
        - name: udev
          hostPath:
            path: /run/udev
            type: Directory
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: "1Gi"
        - name: hugepage
          emptyDir:
            medium: HugePages
        - name: configlocation
          hostPath:
            path: /var/local/openebs/io-engine/
            type: DirectoryOrCreate
---
apiVersion: apps/v1
metadata:
  name: openebs-zfs-localpv-node
  namespace: openebs
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: openebs
    openebs.io/component-name: "openebs-zfs-node"
spec:
  selector:
    matchLabels:
      name: "openebs-zfs-node"
      release: openebs
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: zfs-localpv-2.6.0
        heritage: Helm
        openebs.io/version: "2.6.0"
        role: "openebs-zfs"
        name: "openebs-zfs-node"
        release: openebs
        openebs.io/component-name: "openebs-zfs-node"
    spec:
      priorityClassName: openebs-zfs-csi-node-critical
      serviceAccountName: openebs-zfs-node-sa
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.8.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/zfs-localpv /registration/zfs-localpv-reg.sock"]
          env:
            - name: ADDRESS
              value: /plugin/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: "/var/lib/kubelet/plugins/zfs-localpv/csi.sock"
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_DRIVER
              value: openebs-zfs
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
        - name: openebs-zfs-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: "openebs/zfs-driver:2.6.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--nodename=$(OPENEBS_NODE_NAME)"
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_NODE_DRIVER)"
          env:
            - name: OPENEBS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///plugin/csi.sock
            - name: OPENEBS_NODE_DRIVER
              value: agent
            - name: OPENEBS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ALLOWED_TOPOLOGIES
              value: "All"
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: device-dir
              mountPath: /dev
            - name: encr-keys
              mountPath: /home/keys
            - name: chroot-zfs
              mountPath: /sbin/zfs
              subPath: zfs
            - name: host-root
              mountPath: /host
              mountPropagation: "HostToContainer"
              readOnly: true
            - name: pods-mount-dir
              mountPath: "/var/lib/kubelet/"
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
      volumes:
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: encr-keys
          hostPath:
            path: /home/keys
            type: DirectoryOrCreate
        - name: chroot-zfs
          configMap:
            defaultMode: 0555
            name: openebs-zfspv-bin
        - name: host-root
          hostPath:
            path: /
            type: Directory
        - name: registration-dir
          hostPath:
            path: "/var/lib/kubelet/plugins_registry/"
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: "/var/lib/kubelet/plugins/zfs-localpv/"
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: "/var/lib/kubelet/"
            type: Directory
---
# Source: openebs/charts/localpv-provisioner/templates/deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-localpv-provisioner
  labels:
    chart: localpv-provisioner-4.1.0
    heritage: Helm
    openebs.io/version: "4.1.0"
    app: localpv-provisioner
    release: openebs
    component: "localpv-provisioner"
    openebs.io/component-name: openebs-localpv-provisioner
spec:
  replicas: 1
  strategy:
    type: "Recreate"
    rollingUpdate: null
  selector:
    matchLabels:
      app: localpv-provisioner
      release: openebs
      component: "localpv-provisioner"
  template:
    metadata:
      labels:
        chart: localpv-provisioner-4.1.0
        heritage: Helm
        openebs.io/version: "4.1.0"
        app: localpv-provisioner
        release: openebs
        component: "localpv-provisioner"
        openebs.io/component-name: openebs-localpv-provisioner
        name: openebs-localpv-provisioner
    spec:
      serviceAccountName: openebs-localpv-provisioner
      securityContext: {}
      containers:
        - name: openebs-localpv-provisioner
          image: "openebs/provisioner-localpv:4.1.0"
          imagePullPolicy: IfNotPresent
          resources: null
          env:
            # OPENEBS_IO_K8S_MASTER enables openebs provisioner to connect to K8s
            # based on this address. This is ignored if empty.
            # This is supported for openebs provisioner version 0.5.2 onwards
            #- name: OPENEBS_IO_K8S_MASTER
            #  value: "http://10.128.0.12:8080"
            # OPENEBS_IO_KUBE_CONFIG enables openebs provisioner to connect to K8s
            # based on this config. This is ignored if empty.
            # This is supported for openebs provisioner version 0.5.2 onwards
            #- name: OPENEBS_IO_KUBE_CONFIG
            #  value: "/home/ubuntu/.kube/config"
            - name: OPENEBS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # OPENEBS_SERVICE_ACCOUNT provides the service account of this pod as
            # environment variable
            - name: OPENEBS_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            # OPENEBS_IO_BASE_PATH is the environment variable that provides the
            # default base path on the node where host-path PVs will be provisioned.
            - name: OPENEBS_IO_ENABLE_ANALYTICS
              value: "true"
            - name: OPENEBS_IO_BASE_PATH
              value: "/var/openebs/local"
            - name: OPENEBS_IO_HELPER_IMAGE
              value: "openebs/linux-utils:4.1.0"
            - name: OPENEBS_IO_INSTALLER_TYPE
              value: "localpv-charts-helm"
            # LEADER_ELECTION_ENABLED is used to enable/disable leader election. By default
            # leader election is enabled.
            - name: LEADER_ELECTION_ENABLED
              value: "true"
          # Process name used for matching is limited to the 15 characters
          # present in the pgrep output.
          # So fullname can't be used here with pgrep (>15 chars).A regular expression
          # that matches the entire command name has to specified.
          # Anchor `^` : matches any string that starts with `provisioner-loc`
          # `.*`: matches any string that has `provisioner-loc` followed by zero or more char
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - test `pgrep -c "^provisioner-loc.*"` = 1
            initialDelaySeconds: 30
            periodSeconds: 60
---
# Source: openebs/charts/lvm-localpv/templates/lvm-controller.yaml
apiVersion: apps/v1
metadata:
  name: openebs-lvm-localpv-controller
  labels:
    chart: lvm-localpv-1.6.0
    heritage: Helm
    openebs.io/version: "1.6.0"
    role: "openebs-lvm"
    app: "openebs-lvm-controller"
    release: openebs
    component: "openebs-lvm-controller"
    openebs.io/component-name: "openebs-lvm-controller"
spec:
  selector:
    matchLabels:
      app: "openebs-lvm-controller"
      release: openebs
      component: "openebs-lvm-controller"
  replicas: 1
  template:
    metadata:
      labels:
        chart: lvm-localpv-1.6.0
        heritage: Helm
        openebs.io/version: "1.6.0"
        role: "openebs-lvm"
        app: "openebs-lvm-controller"
        release: openebs
        component: "openebs-lvm-controller"
        openebs.io/component-name: "openebs-lvm-controller"
        name: openebs-lvm-controller
    spec:
      priorityClassName: openebs-lvm-localpv-csi-controller-critical
      serviceAccountName: openebs-lvm-controller-sa
      containers:
        - name: csi-resizer
          image: "registry.k8s.io/sig-storage/csi-resizer:v1.8.0"
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources: {}
        - name: csi-snapshotter
          image: "registry.k8s.io/sig-storage/csi-snapshotter:v6.2.2"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources: {}
        - name: snapshot-controller
          image: "registry.k8s.io/sig-storage/snapshot-controller:v6.2.2"
          args:
            - "--v=5"
          imagePullPolicy: IfNotPresent
          resources: {}
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v3.5.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--feature-gates=Topology=true"
            - "--strict-topology"
            - "--enable-capacity=true"
            - "--extra-create-metadata=true"
            - "--default-fstype=ext4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources: {}
        - name: openebs-lvm-plugin
          image: "openebs/lvm-driver:1.6.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: OPENEBS_CONTROLLER_DRIVER
              value: controller
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: LVM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OPENEBS_IO_INSTALLER_TYPE
              value: "lvm-localpv-helm"
            - name: OPENEBS_IO_ENABLE_ANALYTICS
              value: "true"
          args:
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_CONTROLLER_DRIVER)"
            - "--kube-api-qps=0"
            - "--kube-api-burst=0"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources: {}
      volumes:
        - name: socket-dir
          emptyDir: {}
---
# Source: openebs/charts/mayastor/templates/mayastor/agents/core/agent-core-deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-agent-core
  labels:
    app: agent-core
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent-core
      openebs.io/release: openebs
  template:
    metadata:
      labels:
        app: agent-core
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      serviceAccount: openebs-service-account
      imagePullSecrets:
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-etcd 2379; do date; echo "Waiting for etcd..."; sleep 1; done;
          image: busybox:latest
          name: etcd-probe
      priorityClassName: openebs-cluster-critical
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 5
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 5
      containers:
        - name: agent-core
          resources:
            limits:
              cpu: "1000m"
              memory: "128Mi"
            requests:
              cpu: "500m"
              memory: "32Mi"
          image: "docker.io/openebs/mayastor-agent-core:v2.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-sopenebs-etcd:2379"
            - "--request-timeout=5s"
            - "--cache-period=30s"
            - "--grpc-server-addr=0.0.0.0:50051"
            - "--pool-commitment=250%"
            - "--snapshot-commitment=40%"
            - "--volume-commitment-initial=40%"
            - "--volume-commitment=40%"
            - "--events-url=nats://openebs-nats:4222"
            - "--fmt-style=pretty"
            - "--ansi-colors=true"
            - "--create-volume-limit=10"
          ports:
            - containerPort: 50051
          env:
            - name: RUST_LOG
              value: info
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: agent-ha-cluster
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "100m"
              memory: "16Mi"
          image: "docker.io/openebs/mayastor-agent-ha-cluster:v2.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-g=0.0.0.0:50052"
            - "--store=http://openebs-etcd:2379"
            - "--core-grpc=https://openebs-agent-core:50051"
            - "--events-url=nats://openebs-nats:4222"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
          ports:
            - containerPort: 50052
          env:
            - name: RUST_LOG
              value: info
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
---
# Source: openebs/charts/mayastor/templates/mayastor/apis/api-rest-deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-api-rest
  labels:
    app: api-rest
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-rest
      openebs.io/release: openebs
  template:
    metadata:
      labels:
        app: api-rest
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      imagePullSecrets:
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-agent-core 50051; do date; echo "Waiting for agent-core-grpc services..."; sleep 1; done;
          image: busybox:latest
          name: agent-core-grpc-probe
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-etcd 2379; do date; echo "Waiting for etcd..."; sleep 1; done;
          image: busybox:latest
          name: etcd-probe
      priorityClassName: openebs-cluster-critical
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 5
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 5
      containers:
        - name: api-rest
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "50m"
              memory: "32Mi"
          image: "docker.io/openebs/mayastor-api-rest:v2.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--dummy-certificates"
            - "--no-auth"
            - "--http=0.0.0.0:8081"
            - "--request-timeout=5s"
            - "--core-grpc=https://openebs-agent-core:50051"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
          ports:
            - containerPort: 8080
            - containerPort: 8081
          env:
            - name: RUST_LOG
              value: info
---
# Source: openebs/charts/mayastor/templates/mayastor/csi/csi-controller-deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-csi-controller
  labels:
    app: csi-controller
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: csi-controller
      openebs.io/release: openebs
  template:
    metadata:
      labels:
        app: csi-controller
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      hostNetwork: true
      serviceAccount: openebs-service-account
      dnsPolicy: ClusterFirstWithHostNet
      imagePullSecrets:
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-api-rest 8081; do date; echo "Waiting for REST API endpoint to become available"; sleep 1; done;
          image: busybox:latest
          name: api-rest-probe
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v3.5.0"
          args:
            - "--v=2"
            - "--csi-address=$(ADDRESS)"
            - "--feature-gates=Topology=true"
            - "--strict-topology=false"
            - "--default-fstype=ext4"
            - "--extra-create-metadata" # This is needed for volume group feature to work
            - "--timeout=36s"
            - "--worker-threads=10" # 10 for create and 10 for delete
            - "--prevent-volume-mode-conversion"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: "registry.k8s.io/sig-storage/csi-attacher:v4.3.0"
          args:
            - "--v=2"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: "registry.k8s.io/sig-storage/csi-snapshotter:v6.3.3"
          args:
            - "--v=2"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshot-controller
          args:
            - "--v=2"
            - "--leader-election=false" # since we are running single container
            - "--prevent-volume-mode-conversion"
          image: "registry.k8s.io/sig-storage/snapshot-controller:v6.3.3"
          imagePullPolicy: IfNotPresent
        - name: csi-resizer
          args:
            - "--v=2"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: "registry.k8s.io/sig-storage/csi-resizer:v1.9.3"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-controller
          resources:
            limits:
              cpu: "32m"
              memory: "128Mi"
            requests:
              cpu: "16m"
              memory: "64Mi"
          image: "docker.io/openebs/mayastor-csi-controller:v2.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-socket=/var/lib/csi/sockets/pluginproxy/csi.sock"
            - "--rest-endpoint=http://openebs-api-rest:8081"
            - "--node-selector=openebs.io/csi-node=mayastor"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
            - "--create-volume-limit=10"
          env:
            - name: RUST_LOG
              value: info
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir:
---
# Source: openebs/charts/mayastor/templates/mayastor/obs/obs-callhome-deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-obs-callhome
  labels:
    app: obs-callhome
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: obs-callhome
      openebs.io/release: openebs
  template:
    metadata:
      labels:
        app: obs-callhome
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      serviceAccountName: openebs-service-account
      imagePullSecrets:
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: obs-callhome
          image: "docker.io/openebs/mayastor-obs-callhome:v2.7.0"
          args:
            - "-e http://openebs-api-rest:8081"
            - "-n openebs"
            - "--aggregator-url=http://openebs-obs-callhome-stats:9090/stats"
            - "--send-report"
          env:
            - name: RUST_LOG
              value: info
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "100m"
              memory: "32Mi"
            requests:
              cpu: "50m"
              memory: "16Mi"
        - name: obs-callhome-stats
          image: "docker.io/openebs/mayastor-obs-callhome-stats:v2.7.0"
          args:
            - "--namespace=openebs"
            - "--release-name=openebs"
            - "--mbus-url=nats://openebs-nats:4222"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
          ports:
            - containerPort: 9090
              protocol: TCP
              name: stats
          env:
            - name: RUST_LOG
              value: info
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "100m"
              memory: "32Mi"
            requests:
              cpu: "50m"
              memory: "16Mi"
---
# Source: openebs/charts/mayastor/templates/mayastor/operators/operator-diskpool-deployment.yaml
apiVersion: apps/v1
metadata:
  name: openebs-operator-diskpool
  labels:
    app: operator-diskpool
    openebs.io/release: openebs
    openebs.io/version: 2.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: operator-diskpool
      openebs.io/release: openebs
  template:
    metadata:
      labels:
        app: operator-diskpool
        openebs.io/release: openebs
        openebs.io/version: 2.7.0
        openebs.io/logging: "true"
    spec:
      serviceAccount: openebs-service-account
      imagePullSecrets:
      initContainers:
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-agent-core 50051; do date; echo "Waiting for agent-core-grpc services..."; sleep 1; done;
          image: busybox:latest
          name: agent-core-grpc-probe
        - command:
            - sh
            - -c
            - trap "exit 1" TERM; until nc -vzw 5 openebs-etcd 2379; do date; echo "Waiting for etcd..."; sleep 1; done;
          image: busybox:latest
          name: etcd-probe
      nodeSelector:
        kubernetes.io/arch: amd64
      containers:
        - name: operator-diskpool
          resources:
            limits:
              cpu: "100m"
              memory: "32Mi"
            requests:
              cpu: "50m"
              memory: "16Mi"
          image: "docker.io/openebs/mayastor-operator-diskpool:v2.7.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-e http://openebs-api-rest:8081"
            - "-nopenebs"
            - "--request-timeout=5s"
            - "--interval=30s"
            - "--ansi-colors=true"
            - "--fmt-style=pretty"
          env:
            - name: RUST_LOG
              value: info
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
---
# Source: openebs/charts/zfs-localpv/templates/zfs-controller.yaml
apiVersion: apps/v1
metadata:
  name: openebs-zfs-localpv-controller
  namespace: openebs
  labels:
    chart: zfs-localpv-2.6.0
    heritage: Helm
    openebs.io/version: "2.6.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: openebs
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
spec:
  selector:
    matchLabels:
      app: "openebs-zfs-controller"
      release: openebs
      component: "openebs-zfs-controller"
  replicas: 1
  template:
    metadata:
      labels:
        chart: zfs-localpv-2.6.0
        heritage: Helm
        openebs.io/version: "2.6.0"
        role: "openebs-zfs"
        app: "openebs-zfs-controller"
        release: openebs
        component: "openebs-zfs-controller"
        openebs.io/component-name: "openebs-zfs-controller"
        name: openebs-zfs-controller
    spec:
      priorityClassName: openebs-zfs-csi-controller-critical
      serviceAccountName: openebs-zfs-controller-sa
      containers:
        - name: csi-resizer
          image: "registry.k8s.io/sig-storage/csi-resizer:v1.8.0"
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: "registry.k8s.io/sig-storage/csi-snapshotter:v6.2.2"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: snapshot-controller
          image: "registry.k8s.io/sig-storage/snapshot-controller:v6.2.2"
          args:
            - "--v=5"
          imagePullPolicy: IfNotPresent
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v3.5.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--feature-gates=Topology=true"
            - "--strict-topology"
            - "--enable-capacity=true"
            - "--extra-create-metadata=true"
            - "--default-fstype=ext4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: openebs-zfs-plugin
          image: "openebs/zfs-driver:2.6.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: OPENEBS_CONTROLLER_DRIVER
              value: controller
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: OPENEBS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OPENEBS_IO_INSTALLER_TYPE
              value: "zfs-localpv-helm"
            - name: OPENEBS_IO_ENABLE_ANALYTICS
              value: "true"
          args:
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_CONTROLLER_DRIVER)"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---
# Source: openebs/charts/mayastor/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-etcd
  namespace: "openebs"
  labels:
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.6.0
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: openebs
  serviceName: openebs-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: etcd
        helm.sh/chart: etcd-8.6.0
        app.kubernetes.io/instance: openebs
        app.kubernetes.io/managed-by: Helm
        app: etcd
        openebs.io/logging: "true"
      annotations:
        checksum/token-secret: ba8cb9dbdc29735d1762b87bbfc1f05e704a42a546a7782adfc193fd4dd887e1
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: etcd
                  app.kubernetes.io/instance: openebs
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:11-debian-11-r63
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /bitnami/etcd
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/etcd
      containers:
        - name: etcd
          image: docker.io/bitnami/etcd:3.5.6-debian-11-r10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_STS_NAME
              value: "openebs-etcd"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_AUTH_TOKEN
              value: "jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=10m"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).openebs-etcd-headless.openebs.svc.cluster.local:2379,http://openebs-etcd.openebs.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).openebs-etcd-headless.openebs.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_AUTO_COMPACTION_MODE
              value: "revision"
            - name: ETCD_AUTO_COMPACTION_RETENTION
              value: "100"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster-k8s"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER
              value: "openebs-etcd-0=http://openebs-etcd-0.openebs-etcd-headless.openebs.svc.cluster.local:2380,openebs-etcd-1=http://openebs-etcd-1.openebs-etcd-headless.openebs.svc.cluster.local:2380,openebs-etcd-2=http://openebs-etcd-2.openebs-etcd-headless.openebs.svc.cluster.local:2380"
            - name: ETCD_CLUSTER_DOMAIN
              value: "openebs-etcd-headless.openebs.svc.cluster.local"
            - name: ETCD_QUOTA_BACKEND_BYTES
              value: "8589934592"
          envFrom:
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/etcd
            - name: etcd-jwt-token
              mountPath: /opt/bitnami/etcd/certs/token/
              readOnly: true
      volumes:
        - name: etcd-jwt-token
          secret:
            secretName: openebs-etcd-jwt-token
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
        storageClassName: mayastor-etcd-localpv
---
# Source: openebs/charts/mayastor/charts/loki-stack/charts/loki/templates/statefulset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-loki
  namespace: openebs
  labels:
    app: loki
    chart: loki-2.16.0
    release: openebs
    heritage: Helm
  annotations: {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: loki
      release: openebs
  serviceName: openebs-loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        name: openebs-loki
        release: openebs
      annotations:
        checksum/config: d754b334e2f0f83d14eaa66553982a27439f3f6a19d4625cb63ced56e32602c1
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: openebs-loki
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsNonRoot: false
        runAsUser: 1001
      initContainers:
        - command:
            - /bin/bash
            - -ec
            - chown -R 1001:1001 /data
          image: docker.io/bitnami/bitnami-shell:10
          imagePullPolicy: IfNotPresent
          name: volume-permissions
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: storage
      containers:
        - name: loki
          image: "grafana/loki:2.6.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki
            - name: storage
              mountPath: "/data"
              subPath:
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist-port
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector: {}
      affinity: {}
      tolerations: []
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          secret:
            secretName: openebs-loki
  volumeClaimTemplates:
    - metadata:
        name: storage
        labels: {}
        annotations: {}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
        storageClassName: mayastor-loki-localpv
---
# Source: openebs/charts/mayastor/charts/nats/templates/statefulset.yaml
apiVersion: apps/v1
metadata:
  name: openebs-nats
  namespace: openebs
  labels:
    helm.sh/chart: nats-0.19.14
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: openebs
    app.kubernetes.io/version: "2.9.17"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: openebs
  replicas: 3
  serviceName: openebs-nats
  podManagementPolicy: Parallel
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "7777"
        prometheus.io/scrape: "true"
        checksum/config: e4e59e32c0128fae11bf52af4b733c364d878e4619792f720850b606df60fbd2
      labels:
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: openebs
        app: nats
        openebs.io/logging: "true"
    spec:
      dnsPolicy: ClusterFirst
      # Common volumes for the containers.
      volumes:
        - name: config-volume
          configMap:
            name: openebs-nats-config
        # Local volume shared with the reloader.
        - name: pid
          emptyDir: {}
      #################
      #               #
      #  TLS Volumes  #
      #               #
      #################
      serviceAccountName: openebs-nats
      # Required to be able to HUP signal and apply config
      # reload to the server without restarting the pod.
      shareProcessNamespace: true
      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
        - name: nats
          image: nats:2.9.17-alpine
          imagePullPolicy: IfNotPresent
          resources: {}
          ports:
            - containerPort: 4222
              name: client
            - containerPort: 6222
              name: cluster
            - containerPort: 8222
              name: monitor
          command:
            - "nats-server"
            - "--config"
            - "/etc/nats-config/nats.conf"
          # Required to be able to define an environment variable
          # that refers to other environment variables.  This env var
          # is later used as part of the configuration file.
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVER_NAME
              value: $(POD_NAME)
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CLUSTER_ADVERTISE
              value: $(POD_NAME).openebs-nats.$(POD_NAMESPACE)
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nats-config
            - name: pid
              mountPath: /var/run/nats
          #######################
          #                     #
          # Healthcheck Probes  #
          #                     #
          #######################
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            # for NATS server versions >=2.7.1, /healthz will be enabled
            # startup probe checks that the JS server is enabled, is current with the meta leader,
            # and that all streams and consumers assigned to this JS server are current
            failureThreshold: 90
            httpGet:
              path: /healthz
              port: 8222
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          # Gracefully stop NATS Server on pod deletion or image upgrade.
          #
          lifecycle:
            preStop:
              exec:
                # send the lame duck shutdown signal to trigger a graceful shutdown
                # nats-server will ignore the TERM signal it receives after this
                #
                command:
                  - "nats-server"
                  - "-sl=ldm=/var/run/nats/nats.pid"
        #################################
        #                               #
        #  NATS Configuration Reloader  #
        #                               #
        #################################
        - name: reloader
          image: natsio/nats-server-config-reloader:0.10.1
          imagePullPolicy: IfNotPresent
          resources: {}
          command:
            - "nats-server-config-reloader"
            - "-pid"
            - "/var/run/nats/nats.pid"
            - "-config"
            - "/etc/nats-config/nats.conf"
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nats-config
            - name: pid
              mountPath: /var/run/nats
        ##############################
        #                            #
        #  NATS Prometheus Exporter  #
        #                            #
        ##############################
        - name: metrics
          image: natsio/prometheus-nats-exporter:0.11.0
          imagePullPolicy: IfNotPresent
          resources: {}
          args:
            - -connz
            - -routez
            - -subz
            - -varz
            - -prefix=nats
            - -use_internal_server_id
            - -jsz=all
            - http://localhost:8222/
          ports:
            - containerPort: 7777
              name: metrics
  volumeClaimTemplates:
# Source: openebs/charts/lvm-localpv/charts/crds/templates/lvmnode.yaml
##############################################
###########                       ############
###########     LVMNode CRD       ############
###########                       ############
##############################################
---

---

---

---

---

---

---

---

---
# Source: openebs/charts/lvm-localpv/templates/csidriver.yaml
# Create the CSI Driver object
apiVersion: storage.k8s.io/v1
metadata:
  name: local.csi.openebs.io
spec:
  # do not require volumeattachment
  attachRequired: false
  podInfoOnMount: true
  storageCapacity: true
---
# Source: openebs/charts/zfs-localpv/templates/csidriver.yaml
# Create the CSI Driver object
apiVersion: storage.k8s.io/v1
metadata:
  name: zfs.csi.openebs.io
spec:
  # do not require volumeattachment
  attachRequired: false
  podInfoOnMount: false
  storageCapacity: true
---
# Source: openebs/templates/pre-upgrade-hook.yaml
apiVersion: v1
metadata:
  name: openebs-pre-upgrade-hook
  namespace: openebs
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "openebs"
    app.kubernetes.io/version: 4.1.0
    helm.sh/chart: "openebs-4.1.0"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-pre-upgrade-hook
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "openebs"
    app.kubernetes.io/version: 4.1.0
    helm.sh/chart: "openebs-4.1.0"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["delete", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-pre-upgrade-hook
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "openebs"
    app.kubernetes.io/version: 4.1.0
    helm.sh/chart: "openebs-4.1.0"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
subjects:
  - kind: ServiceAccount
    name: openebs-pre-upgrade-hook
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-pre-upgrade-hook
  apiGroup: rbac.authorization.k8s.io
---
# Source: openebs/charts/mayastor/charts/loki-stack/templates/tests/loki-test-pod.yaml
apiVersion: v1
metadata:
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: loki-stack
    chart: loki-stack-2.9.11
    release: openebs
    heritage: Helm
  name: openebs-loki-stack-test
spec:
  containers:
    - name: test
      image: "bats/bats:1.8.2"
      imagePullPolicy: ""
      args:
        - /var/lib/loki/test.sh
      env:
        - name: LOKI_SERVICE
          value: openebs-loki
        - name: LOKI_PORT
          value: "3100"
      volumeMounts:
        - name: tests
          mountPath: /var/lib/loki
  restartPolicy: Never
  volumes:
    - name: tests
      configMap:
        name: openebs-loki-stack-test
---
# Source: openebs/charts/mayastor/charts/nats/templates/tests/test-request-reply.yaml
apiVersion: v1
metadata:
  name: "openebs-nats-test-request-reply"
  labels:
    chart: nats-0.19.14
    app: openebs-nats-test-request-reply
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: nats-box
      image: natsio/nats-box:0.13.8
      env:
        - name: NATS_HOST
          value: openebs-nats
      command:
        - /bin/sh
        - -ec
        - |
          nats reply -s nats://$NATS_HOST:4222 'name.>' --command "echo 1" &
        - |
          "&&"
        - |
          name=$(nats request -s nats://$NATS_HOST:4222 name.test '' 2>/dev/null)
        - |
          "&&"
        - |
          [ $name = test ]
  restartPolicy: Never
---
# Source: openebs/templates/pre-upgrade-hook.yaml
apiVersion: batch/v1
metadata:
  name: "openebs-pre-upgrade-hook"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "openebs"
    app.kubernetes.io/version: 4.1.0
    helm.sh/chart: "openebs-4.1.0"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "openebs-pre-upgrade-hook"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "openebs"
        helm.sh/chart: "openebs-4.1.0"
    spec:
      serviceAccountName: "openebs-pre-upgrade-hook"
      restartPolicy: Never
      containers:
        - name: pre-upgrade-job
          image: docker.io/bitnami/kubectl:1.25.15
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-c"
          args:
            - "(kubectl annotate --overwrite crd volumesnapshots.snapshot.storage.k8s.io volumesnapshotclasses.snapshot.storage.k8s.io volumesnapshotcontents.snapshot.storage.k8s.io helm.sh/resource-policy=keep || true) && (kubectl -n openebs delete deploy -l openebs.io/component-name=openebs-localpv-provisioner --ignore-not-found)"
